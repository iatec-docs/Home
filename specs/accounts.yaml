openapi: 3.0.0
servers:
  - url: 'https://ws-accounts-ho.sdasystems.org/v3'
    description: Homologation
    variables: {}
  - url: 'https://ws-accounts.sdasystems.org/v3'
    description: Production
info:
  title: Accounts Api
  description: |-
    API for accessing the Accounts subsystem.
    For internal use only.
  version: 3.0.0
  contact:
    name: Andre Guilherme
    email: andre.guilherme@iatec.com
    url: ''
security:
  - client_credentials:
      - user.management
tags: 
  - name: user
    description: Invitation-related operations
paths:
  '/users/{id}/password':
    put:
      tags:
        - user
      operationId: changeUserPasswordById
      summary: Change user password by id
      description: Change user password by id
      responses:
        '204':
          description: Password updated
        '404':
          description: User not found
      requestBody:
        $ref: '#/components/requestBodies/changeUserPasswordById'
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
  '/users/by-username/{username}/password':
    put:
      tags:
        - user
      operationId: resetUserPasswordByUsername
      summary: Reset user password by username
      description: Reset user password by username
      responses:
        '204':
          description: Password updated
        '404':
          description: User not found
      requestBody:
        $ref: '#/components/requestBodies/changeUserPasswordById'
      parameters:
        - in: path
          name: username
          required: true
          type: string
  '/users/by-email/{email}/password':
    put:
      tags:
        - user
      operationId: resetUserPasswordByEmail
      summary: Reset user password by email
      description: Reset user password by email
      responses:
        '204':
          description: Password updated
        '404':
          description: User not found
      requestBody:
        $ref: '#/components/requestBodies/changeUserPasswordById'
      parameters:
        - in: path
          name: email
          required: true
          type: string
  '/users/{id}':
    get:
      tags:
        - user
      operationId: getUserById
      summary: Get a user
      description: Get a user by id
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      parameters:
        - in: path
          name: id
          description: The id of the user
          required: true
          type: string
          format: uuid
    put:
      tags:
        - user
      operationId: updateUserById
      summary: Update user by id
      description: Update a user by id
      responses:
        '200':
          description: User inserted or updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        $ref: '#/components/requestBodies/UserInsert'
      parameters:
        - in: path
          name: id
          description: The id of the user
          required: true
          type: string
          format: uuid
  '/users/by-username/{id}':
    get:
      tags:
        - user
      operationId: getUserByUsername
      summary: Get a user
      description: Get a user by username
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      parameters:
        - in: path
          name: username
          description: The username of the user
          required: true
          type: string
    put:
      tags:
        - user
      operationId: updateUserByUsername
      summary: Update user by username
      description: Update a user by username
      responses:
        '200':
          description: User inserted or updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        $ref: '#/components/requestBodies/UserInsert'
      parameters:
        - in: path
          name: username
          description: The username of the user
          required: true
          type: string
  '/users/by-email/{id}':
    get:
      tags:
        - user
      operationId: getUserByEmail
      summary: Get a user
      description: Get a user by email
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      parameters:
        - in: path
          name: email
          description: The email of the user
          required: true
          type: string
    put:
      tags:
        - user
      operationId: updateUserByEmail
      summary: Update user by email
      description: Update a user by email
      responses:
        '200':
          description: User inserted or updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        $ref: '#/components/requestBodies/UserInsert'
      parameters:
        - in: path
          name: email
          description: The email of the user
          required: true
          type: string
  /users:
    get:
      tags:
        - user
      operationId: getUsers
      summary: Get many users
      description: Get many users by an optional filter
      parameters:
        - in: query
          name: filter
          description: A filter for matching the users
          required: false
          type: string
        - in: query
          name: limit
          description: The maximum number of records to bring.
          required: false
          type: integer
        - in: query
          name: offset
          description: The number of records to skip. Used for pagination.
          required: false
          type: integer
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUsers'
    post:
      tags:
        - user
      operationId: createUser
      summary: Create user
      description: Create a user
      responses:
        '201':
          description: User created
          headers:
            Location:
              description: The url where the created user can be found
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The user to create
      parameters: []
  /_meta/version:
    get:
      tags:
        - metadata
      operationId: getVersionNumber
      summary: Get version
      description: Get version number
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: string
      parameters: []
components:
  requestBodies:
    UserInsert:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserInsert'
      description: The user info
    changeUserPasswordById:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              password:
                description: The new user password
                type: string
  securitySchemes:
    client_credentials:
      type: oauth2
      description: Generates a token via the Client Credentials flow.
      flows:
        clientCredentials:
          tokenUrl: 'https://login-ho.sdasystems.org/connect/token'
          scopes:
            accounts.management: Accounts Management API
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
    UserInsert:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    PagedUsers:
      type: object
      properties:
        count:
          type: integer
        start:
          type: integer
        total:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
  links: {}
  callbacks: {}
