swagger: "2.0"
info:
  title: "Accounts Api"
  description: API for accessing the Accounts subsystem. Currently, only invitation procedures are implemented.
  version: 2.0.0
host: ws-accounts-ho.sdasystems.org
basePath: /v2
schemes:
  - https
security:
  - client_credentials:
    - accounts.management
tags:
  - name: accounts
    description: "Invitation-related operations"
paths:
  /users:
    get:
      tags:
        - accounts
      operationId: getUsers
      summary: "Get many users"
      description: "Get many users by an optional filter"
      produces:
        - application/json
      parameters:
        - in: query
          name: filter
          description: "A filter for matching the users"
          type: string
          required: false
        - in: query
          name: limit
          description: "The maximum number of records to bring."
          type: integer
          required: false
        - in: query
          name: offset
          description: "The number of records to skip. Used for pagination."
          type: integer
          required: false
      responses:
        200:
          description: "Users found"
          schema:
            $ref: "#/definitions/PagedUsers"
    post:
      tags:
        - accounts
      operationId: createUser
      summary: "Create user"
      description: "Create a user"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The user to create"
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
          headers: 
            Location:
              type: string
              description: "The url where the created user can be found"
  /users/{id}:
    parameters:
      - in: path
        name: id
        description: "The id of the user"
        type: string
        format: uuid
        required: true
    head:
      tags:
        - accounts
      operationId: checkUserById
      summary: "Check if user exists by id"
      description: "Check the existence of a user by its id"
      produces:
        - application/json
      responses:
        200:
          description: "User found"
        404:
          description: "User not found"
    get:
      tags:
        - accounts
      operationId: getUserById
      summary: "Get a user"
      description: "Get a user by id"
      produces:
        - application/json
      responses:
        200:
          description: "User found"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
        - accounts
      operationId: updateUserById
      summary: "Update user by id"
      description: "Update a user by id"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The user info"
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User updated"
          schema:
            $ref: "#/definitions/User"
  /users/by-username/{username}:
    parameters:
      - in: path
        name: username
        description: "The username of the user"
        type: string
        required: true
    head:
      tags:
        - accounts
      operationId: checkUserByUsername
      summary: "Check if user exists by username"
      description: "Check the existence of a user by its username"
      produces:
        - application/json
      responses:
        200:
          description: "User found"
        404:
          description: "User not found"
    get:
      tags:
        - accounts
      operationId: getUserByUsername
      summary: "Get a user"
      description: "Get a user by username"
      produces:
        - application/json
      responses:
        200:
          description: "User found"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
        - accounts
      operationId: updateUserByUsername
      summary: "Update user by username"
      description: "Update a user by username"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: "The user info"
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User updated"
          schema:
            $ref: "#/definitions/User" 
  /users/{id}/password:
    parameters:
      - in: path
        name: id
        type: string
        format: uuid
        required: true
    put:
      tags:
        - accounts
      operationId: changeUserPasswordById
      summary: "Change user passowrd by id"
      description: "Change user passowrd by id"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: password
          description: "The new user password"
          type: string
      responses:
        204:
          description: "Password updated"
  /users/by-username/{username}/password:
    parameters:
      - in: path
        name: username
        type: string
        required: true
    put:
      tags:
        - accounts
      operationId: resetUserPasswordByUsername
      summary: "Reset user passowrd by username"
      description: "Reset user passowrd by username"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: password
          description: "The new user password"
          type: string
      responses:
        204:
          description: "Password updated"
  /_meta/version:
    get:
      tags:
        - metadata
      operationId: getVersionNumber
      summary: "Get version"
      description: "Get version number"
      produces:
        - application/json
      responses:
        200:
          description: "Users found"
          schema:
            type: string
definitions:
  User:
    type: object
    properties:
      id:
        type: "string"
        format: "uuid"
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      approved:
        type: "boolean"
      registration_complete:
        type: "boolean"
      created_at:
        type: "string"
        format: "date-time"
  PagedUsers:
    type: object
    properties: 
      count: 
        type: "integer"
      start: 
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/User"

securityDefinitions:
  client_credentials:
    type: "oauth2"
    description: "Generates a token via the Client Credentials flow."
    tokenUrl: "https://login-ho.sdasystems.org/connect/token"
    flow: "application"
    scopes: 
      accounts.management: "Accounts Management API"